name: Build and Release Ansible Collections

on:
  push:
    branches:
      - main
    paths:
      - 'collections/**'
      - '.github/workflows/release.yml'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      collections: ${{ steps.find-collections.outputs.collections }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find collections
        id: find-collections
        run: |
          COLLECTIONS=$(find collections -type f -name galaxy.yml | sed 's/\/galaxy.yml//' | jq -R -s -c 'split("\n")[:-1]')
          echo "collections=$COLLECTIONS" >> $GITHUB_OUTPUT

  build-and-release:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        collection: ${{ fromJson(needs.setup.outputs.collections) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build collection
        id: build-collection
        uses: ansible-community/github-action-build-collection@main
        with:
          subdirectory: ${{ matrix.collection }}

      - name: Get current version
        id: version
        run: |
          version=$(grep "version:" "${{ matrix.collection }}/galaxy.yml" | awk '{print $2}')
          echo "current_version=$version" >> $GITHUB_OUTPUT
          echo "collection_name=$(basename ${{ matrix.collection }})" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" =~ ^feat!|BREAKING\ CHANGE ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^feat ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Create new version
        id: new_version
        run: |
          IFS='.' read -ra VERSION <<< "${{ steps.version.outputs.current_version }}"
          MAJOR=${VERSION[0]}
          MINOR=${VERSION[1]}
          PATCH=${VERSION[2]}

          case "${{ steps.bump.outputs.bump }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          echo "new_version=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
          echo "$(basename ${{ matrix.collection }}): $MAJOR.$MINOR.$PATCH" >> versions.txt

      - name: Update version in galaxy.yml
        run: |
          cd ${{ matrix.collection }}
          sed -i "s/version: .*/version: ${{ steps.new_version.outputs.new_version }}/" galaxy.yml
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add galaxy.yml
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          cd ../..

      - name: Push version updates
        if: matrix.collection == 'collections/sigp/microk8s'
        run: git push

      - name: Create Release
        if: matrix.collection == 'collections/sigp/microk8s'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ needs.build-and-release.outputs.artifact-path }}
          tag_name: collections-v${{ steps.new_version.outputs.new_version }}
          name: Collections Release ${{ steps.new_version.outputs.new_version }}
          body: |
            Release of Ansible Collections
            Versions:
            ${{ steps.new_version.outputs.new_version }}