name: Build and Release Ansible Collections

on:
  push:
    branches:
      - main
    paths:
      - 'collections/**'
      - '.github/workflows/release.yml'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      collections: ${{ steps.find-collections.outputs.collections }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find collections
        id: find-collections
        run: |
          COLLECTIONS=$(find collections -type f -name galaxy.yml | sed 's/\/galaxy.yml//' | jq -R -s -c 'split("\n")[:-1]')
          echo "collections=$COLLECTIONS" >> $GITHUB_OUTPUT

  version:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit message
        id: commit-msg
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Update versions
        id: update-versions
        run: |
          for collection in ${{ fromJson(needs.setup.outputs.collections) }}; do
            cd $collection
            current_version=$(grep "version:" galaxy.yml | awk '{print $2}')
            IFS='.' read -ra VERSION <<< "$current_version"
            MAJOR=${VERSION[0]}
            MINOR=${VERSION[1]}
            PATCH=${VERSION[2]}

            if [[ "${{ steps.commit-msg.outputs.commit_msg }}" =~ ^feat!|BREAKING\ CHANGE ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [[ "${{ steps.commit-msg.outputs.commit_msg }}" =~ ^feat ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi

            new_version="$MAJOR.$MINOR.$PATCH"
            sed -i "s/version: .*/version: $new_version/" galaxy.yml
            echo "$collection: $new_version" >> versions.txt
            cd ../..
          done

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "chore: bump collection versions"
          git push

  build:
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        collection: ${{ fromJson(needs.setup.outputs.collections) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build collection
        id: build-collection
        uses: ansible-community/github-action-build-collection@main
        with:
          subdirectory: ${{ matrix.collection }}

      - name: Generate artifact name
        id: artifact-name
        run: |
          SANITIZED_NAME=$(echo "${{ matrix.collection }}" | tr '/' '-')
          echo "artifact_name=$SANITIZED_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.artifact_name }}
          path: ${{ steps.build-collection.outputs.artifact-path }}

  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          tag_name: collections-release
          name: Ansible Collections Release
          body: |
            Release of Ansible Collections
            $(cat versions.txt)