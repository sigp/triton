---
  - name: Install and enable MicroK8s
    hosts: all
    become: yes
    vars_files:
      - ../vars/volumes.yaml
    vars:
      microk8s_config: "/var/snap/microk8s/current/credentials/client.config"
      ns: "lynx-testing"
      lynx_conf: "{{ lookup('file', '../docker/lynx-config.toml') }}"
      jwt_hex: "{{ lookup('file', '../jwttoken/jwt.hex') }}"
      apply: true
    environment:
      K8S_AUTH_KUBECONFIG: /var/snap/microk8s/current/credentials/client.config
      KUBECONFIG: /var/snap/microk8s/current/credentials/kubelet.config
    tasks:

###############
### Install ###
###############

      - name: Get the latest stable version of kubectl
        uri:
          url: "https://dl.k8s.io/release/stable.txt"
          return_content: yes
        register: kubectl_version
        tags: 
          - install

      - name: Download kubectl binary
        get_url:
          url: "https://dl.k8s.io/release/{{ kubectl_version.content | trim }}/bin/linux/amd64/kubectl"
          dest: /usr/local/bin/kubectl
          mode: '0755'
          owner: root
          group: root
        tags: install


      - name: Download Helm installation script
        ansible.builtin.shell: curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        args:
          creates: /usr/local/bin/helm
        tags: install

      - name: Make Helm installation script executable
        file:
          path: get_helm.sh
          mode: '0700'
        tags: install

      - name: Run Helm installation script
        shell: ./get_helm.sh
        args:
          creates: /usr/local/bin/helm
        tags: install    
 
      - name: Update apt cache
        apt:
          update_cache: yes
        tags: install
  
      - name: Install pip
        apt:
          name: "{{ item }}"
          state: present
        loop:
          - python3-pip
          - python3-kubernetes
        tags: install
  
      - name: Install MicroK8s
        snap:
          name: microk8s
          state: present
          classic: yes
        tags: 
          - install
          - addnode
  
      - name: Add user to microk8s group
        user:
          name: "{{ ansible_user }}"
          groups: microk8s
          append: yes
        tags: 
          - install
          - addnode

        # fix for https://github.com/canonical/microk8s/issues/4574#issuecomment-2259157204
      - name: Configure git safe directory
        command: git config --global --add safe.directory /snap/microk8s/current/addons/community/.git
        tags: configure
  
      - name: Enable MicroK8s features
        command: "microk8s enable {{ item }}"
        become: yes
        become_user: root
        loop:
          - dns
          - storage:size=40Gi
          - dashboard
          # - linkerd
          - community #argo depends on community
          # - argocd 
        tags: configure
  
      - name: Wait for the dashboard to be ready
        command: microk8s status --wait-ready
        become: yes
        become_user: root
        tags: configure

      - name: Create alias for microk8s kubectl
        lineinfile:
          path: "/home/{{ item }}/.bash_aliases"
          line: "alias mh='microk8s helm'"
          regexp: '^alias mh='
          state: present
          create: true
        tags: install
        loop:
          - ubuntu
          - "{{ ansible_user }}"

      - name: Source the .bashrc file
        shell: "source /home/{{ item }}/.bashrc"
        args:
          executable: /bin/bash
        tags: install   
        loop:
          - ubuntu
          - "{{ ansible_user }}"

      - name: stackgres
        include_tasks: ../tasks/stackgres.yml
        tags: configure
        

      # - name: redis
      #   include_tasks: ../tasks/redis.yml
      #   tags: configure
        

###############
### Deploy  ###
############### 

      - name: Get K8S namespace
        kubernetes.core.k8s:  
          name: "{{ item }}"
          apply: "{{ apply }}"
          api_version: v1  
          kind: Namespace  
          state: present
        loop:
          - lynx-testing
        tags: deploy
  
      - name: Create a service
        kubernetes.core.k8s:
          state: present
          apply: "{{ apply }}"
          definition:
            apiVersion: v1
            kind: Service
            metadata:
              namespace: "{{ ns }}"
              labels:
                io.sigmaprime.app: "{{ item }}"
              name: "{{ item }}"
            spec:
              ports:
                - name: "5052"
                  port: 5052
                  targetPort: 5052
                - name: "5054"
                  port: 5054
                  targetPort: 5054
                - name: "9000"
                  port: 9000
                  targetPort: 9000
                - name: 9000-udp
                  port: 9000
                  protocol: UDP
                  targetPort: 9000
                - name: "9001"
                  port: 9001
                  protocol: UDP
                  targetPort: 9001
        loop:
          - lighthouse
          - lynx
        tags: deploy
  
      - name: StatefulSet from template
        kubernetes.core.k8s:
          state: present
          apply: "{{ apply }}"
          template: ../lynx-builder/templates/statefulsets/lynx-statefulset.yaml.j2
        loop:
          - lynx
        tags: deploy
  
      - name: Create a persistent volume claim
        kubernetes.core.k8s:
          state: present
          apply: "{{ apply }}"
          definition:
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: "{{ item }}"
              namespace: "{{ ns }}"
            spec:
              accessModes: [ReadWriteOnce]
              resources: { requests: { storage: 1Gi } }
        loop:
          - lynxdata
          - reth
          - rethlogs
          - lighthousedata
        tags: deploy
  
      - name: Create a persistent volume
        kubernetes.core.k8s:
          state: present
          apply: "{{ apply }}"
          definition:
            apiVersion: v1
            kind: PersistentVolume
            metadata:
              name: "{{ item.name }}"
            spec:
              capacity:
                storage: "{{ item.capacity }}"
              accessModes: "{{ item.accessModes }}"
              storageClassName: "{{ item.storageClassName }}"
              hostPath:
                path: "{{ item.hostPath.path | default(item.hostPath) }}"
        loop: "{{ persistentVolumes }}"
        tags: deploy



       
      - name: Create a Kubernetes secret from template
        kubernetes.core.k8s:
          state: present
          template: ../lynx-builder/templates/secrets/engine-api-secret.yml.j2
        tags: deploy
  
      # - name: remove the configmap
      #   kubernetes.core.k8s:
      #     state: absent
      #     namespace: "{{ ns }}"
      #     definition:
      #       apiVersion: v1
      #       kind: ConfigMap
      #       metadata:
      #         name: lynx-config
      #   tags: deploy
  
      - name: create the configmap
        kubernetes.core.k8s:
          state: present
          apply: "{{ apply }}"
          namespace: "{{ ns }}"
          definition:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: lynx-config
            data:
              lynx-config.toml: "{{ lynx_conf }}"
        tags: deploy
  


###############
### Reset #####
###############

      - name: reset microk8s
        command: microk8s reset
        become: yes
        tags: reset
